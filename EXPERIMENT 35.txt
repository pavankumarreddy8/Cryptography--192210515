#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

void vigenereEncrypt(char *plaintext, int *key, char *ciphertext) {
    int i;
    for (i = 0; plaintext[i] != '\0'; ++i) {
        if (isalpha(plaintext[i])) {
            char base = isupper(plaintext[i]) ? 'A' : 'a';
            ciphertext[i] = (plaintext[i] - base + key[i % 26]) % 26 + base;
        } else {
            ciphertext[i] = plaintext[i];
        }
    }
    ciphertext[i] = '\0';
}

void vigenereDecrypt(char *ciphertext, int *key, char *decrypted) {
    int i;
    for (i = 0; ciphertext[i] != '\0'; ++i) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            decrypted[i] = (ciphertext[i] - base - key[i % 26] + 26) % 26 + base;
        } else {
            decrypted[i] = ciphertext[i];
        }
    }
    decrypted[i] = '\0';
}

int main() {
    char plaintext[] = "HelloWorld";
    int key[] = {3, 19, 5, 12, 8}; // Replace this with your random key stream

    // Ensure key length is sufficient for the plaintext
    int keyLength = sizeof(key) / sizeof(key[0]);
    int plaintextLength = sizeof(plaintext) / sizeof(plaintext[0]) - 1; // excluding null terminator

    if (keyLength < plaintextLength) {
        printf("Error: Key length should be at least as long as the plaintext.\n");
        return 1;
    }

    char ciphertext[sizeof(plaintext)];
    char decrypted[sizeof(plaintext)];

    // Encrypt the plaintext
    vigenereEncrypt(plaintext, key, ciphertext);

    // Decrypt the ciphertext
    vigenereDecrypt(ciphertext, key, decrypted);

    // Display results
    printf("Plaintext: %s\n", plaintext);
    printf("Key: ");
    for (int i = 0; i < plaintextLength; ++i) {
        printf("%d ", key[i % keyLength]);
    }
    printf("\n");
    printf("Ciphertext: %s\n", ciphertext);
    printf("Decrypted: %s\n", decrypted);

    return 0;
}
