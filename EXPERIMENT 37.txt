#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_SIZE 26

// Function to calculate letter frequency in a given text
void calculateLetterFrequency(const char *text, int *frequency) {
    for (size_t i = 0; i < strlen(text); i++) {
        if (isalpha(text[i])) {
            frequency[tolower(text[i]) - 'a']++;
        }
    }
}

// Function to perform monoalphabetic substitution decryption using a key
void monoalphabeticDecrypt(const char *ciphertext, const char *key, char *plaintext) {
    for (size_t i = 0; i < strlen(ciphertext); i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            int index = tolower(ciphertext[i]) - 'a';
            plaintext[i] = isupper(ciphertext[i]) ? toupper(key[index]) : key[index];
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

// Function to score the similarity of two frequency arrays
int scoreFrequencyMatch(int *freq1, int *freq2) {
    int score = 0;
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        score += abs(freq1[i] - freq2[i]);
    }
    return score;
}

// Function to find the most likely key based on letter frequency analysis
void findLikelyKey(const char *ciphertext, char *likelyKey) {
    int ciphertextFrequency[ALPHABET_SIZE] = {0};
    calculateLetterFrequency(ciphertext, ciphertextFrequency);

    // English letter frequency (you can replace this with a more accurate model)
    int englishFrequency[ALPHABET_SIZE] = {
        8, 2, 3, 4, 13, 2, 2, 6, 7, 0, 1, 4, 2, 7, 8, 2, 0, 6, 6, 9, 3, 1, 0, 2, 0, 1
    };

    // Try all 26 shifts to find the best match
    int bestScore = 999999; // Set to a large value
    for (int shift = 0; shift < ALPHABET_SIZE; shift++) {
        char key[ALPHABET_SIZE];
        for (int i = 0; i < ALPHABET_SIZE; i++) {
            key[i] = 'A' + (i + shift) % ALPHABET_SIZE;
        }
        char decryptedText[strlen(ciphertext) + 1];
        monoalphabeticDecrypt(ciphertext, key, decryptedText);

        int score = scoreFrequencyMatch(ciphertextFrequency, englishFrequency);
        if (score < bestScore) {
            bestScore = score;
            strcpy(likelyKey, key);
        }
    }
}

int main() {
    // Example Ciphertext
    const char *ciphertext = "KVLIV";

    // Find the likely key
    char likelyKey[ALPHABET_SIZE];
    findLikelyKey(ciphertext, likelyKey);

    // Display the likely key
    printf("Likely Key: %s\n", likelyKey);

    // Decrypt the ciphertext using the likely key
    char decryptedText[strlen(ciphertext) + 1];
    monoalphabeticDecrypt(ciphertext, likelyKey, decryptedText);

    // Display the decrypted text
    printf("Decrypted Text: %s\n", decryptedText);

    return 0;
}
